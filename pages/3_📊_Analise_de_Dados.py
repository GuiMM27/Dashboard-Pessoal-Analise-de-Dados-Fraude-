# -------------------- An√°lise de Dados --------------------
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import os

st.title("An√°lise de Fraudes em Transa√ß√µes Banc√°rias")

# -------------------- Loader --------------------
with st.spinner("Carregando dados..."):
    url = "https://drive.google.com/uc?id=1NdnQDFrrb30ILs0i8wvnht-jqoSAlmTC"
    git add .df = pd.read_csv(url)

st.success(f"Dataset carregado com {len(df):,} linhas e {df.shape[1]} colunas.")

# -------------------- Apresenta√ß√£o dos Dados --------------------
st.markdown("""
### ‚ÑπÔ∏è Sobre o Dataset
- **Fonte:** Conjunto de dados de fraudes em cart√µes de cr√©dito (Kaggle).
- **Vari√°veis principais:**
  - `Time`: segundos desde a primeira transa√ß√£o registrada.
  - `Amount`: valor da transa√ß√£o.
  - `Class`: 0 = normal, 1 = fraude.
  - `V1‚ÄìV28`: vari√°veis resultantes de redu√ß√£o PCA para anonimiza√ß√£o.
- **Perguntas que vamos responder:**
  1. Em quais hor√°rios do dia ocorrem mais fraudes?
  2. Qual a faixa t√≠pica de valores normais das transa√ß√µes?
  3. Existe diferen√ßa estat√≠stica entre os valores de transa√ß√µes normais e fraudulentas?
""")

# Mostrar tipos de vari√°veis
st.subheader("üìã Estrutura dos Dados")
st.write(df.dtypes)

# -------------------- Estat√≠sticas Descritivas --------------------
st.subheader("üìä Estat√≠sticas Iniciais")
st.write(df[['Time', 'Amount', 'Class']].describe())

# -------------------- Gr√°fico 1: Fraudes por hora --------------------
st.subheader("1Ô∏è‚É£ Quantidade de Fraudes por Hora do Dia")

# Converter segundos em horas do dia
df['Hour'] = (df['Time'] // 3600) % 24
fraude_por_hora = df.groupby('Hour')['Class'].sum()
total_por_hora = df.groupby('Hour')['Class'].count()
taxa_fraude = fraude_por_hora / total_por_hora * 100  # percentual

# Definir cores baseado em faixas
colors = []
for v in taxa_fraude.values:
    if v < 0.15:
        colors.append('green')
    elif 0.15 <= v <= 0.25:
        colors.append('yellow')
    else:
        colors.append('red')

fig, ax = plt.subplots(figsize=(10,4))
ax.bar(taxa_fraude.index, taxa_fraude.values, color=colors)
ax.set_xticks(range(0,24))
ax.set_xlabel("Hora do dia")
ax.set_ylabel("Taxa de fraude (%)")
ax.set_title("Taxa de Fraude por Hora do Dia")
ax.axhline(0.15, color='black', linestyle='--', linewidth=1.5, label='Limite inferior aceit√°vel')
ax.axhline(0.25, color='black', linestyle='--', linewidth=1.5, label='Limite superior aceit√°vel')
ax.legend()
st.pyplot(fig)

st.write(
    """
    üí° **Interpreta√ß√£o:**  
    - Verde: risco baixo de fraude.  
    - Amarelo: faixa de aten√ß√£o.  
    - Vermelho: risco cr√≠tico que merece monitoramento refor√ßado.
    """
)

# -------------------- Gr√°fico 2: Distribui√ß√£o dos valores --------------------
st.subheader("2Ô∏è‚É£ Faixa T√≠pica de Valores das Transa√ß√µes")

# Estat√≠sticas principais
mean_amount = df['Amount'].mean()
std_amount = df['Amount'].std()
median_amount = df['Amount'].median()
limit_value = mean_amount + 2*std_amount  # limite superior aceit√°vel

st.write(f"M√©dia: {mean_amount:.2f}, Mediana: {median_amount:.2f}, Desvio padr√£o: {std_amount:.2f}")

# Histograma com escala logar√≠tmica no eixo Y
fig2, ax2 = plt.subplots(figsize=(10,4))
bins = np.linspace(0, df['Amount'].max(), 100)
ax2.hist(df['Amount'], bins=bins, color='skyblue', edgecolor='black')
ax2.axvline(limit_value, color='red', linestyle='--', linewidth=2, label=f'Limite aceit√°vel: {limit_value:.2f}')
ax2.set_xlabel("Valor da transa√ß√£o")
ax2.set_ylabel("Quantidade (escala log)")
ax2.set_yscale("log")
ax2.set_title("Distribui√ß√£o dos Valores das Transa√ß√µes (Escala Logar√≠tmica)")
ax2.legend()
st.pyplot(fig2)

# -------------------- Correla√ß√£o --------------------
st.subheader("3Ô∏è‚É£ Correla√ß√£o entre Vari√°veis")
corr = df[['Time','Amount','Class']].corr()
fig_corr, ax_corr = plt.subplots(figsize=(5,4))
sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax_corr)
ax_corr.set_title("Matriz de Correla√ß√£o")
st.pyplot(fig_corr)

st.write("""
üí° **Interpreta√ß√£o da Correla√ß√£o:**  
- Valores pr√≥ximos de **1** = rela√ß√£o positiva forte.  
- Valores pr√≥ximos de **-1** = rela√ß√£o negativa forte.  
- Valores pr√≥ximos de **0** = pouca ou nenhuma rela√ß√£o.  
""")

# -------------------- Intervalo de Confian√ßa --------------------
st.subheader("4Ô∏è‚É£ Intervalo de Confian√ßa")

normal_amount = df[df['Class'] == 0]['Amount']
conf_int = stats.t.interval(
    0.95, len(normal_amount)-1, loc=np.mean(normal_amount), scale=stats.sem(normal_amount)
)
st.write(
    f"üîπ Intervalo de Confian√ßa 95% para a m√©dia das transa√ß√µes normais: "
    f"{conf_int[0]:.2f} ‚Äì {conf_int[1]:.2f}"
)

# -------------------- Teste de Hip√≥tese --------------------
st.subheader("5Ô∏è‚É£ Teste de Hip√≥tese: Diferen√ßa entre Valores Normais e Fraudulentos")

fraud_amount = df[df['Class']==1]['Amount']

t_stat, p_val = stats.ttest_ind(normal_amount, fraud_amount, equal_var=False)

st.write(f"T-stat: {t_stat:.2f}, p-valor: {p_val:.5f}")
if p_val < 0.05:
    st.success("‚úÖ Existe diferen√ßa estatisticamente significativa entre os valores de transa√ß√µes normais e fraudulentas.")
else:
    st.warning("‚ö†Ô∏è N√£o foi encontrada diferen√ßa significativa.")

# -------------------- Respostas & Conclus√µes --------------------
st.markdown("---")
st.subheader("‚úÖ Respostas √†s Perguntas & Conclus√µes")

# horas cr√≠ticas e de aten√ß√£o
horas_criticas = taxa_fraude[taxa_fraude > 0.25].index.tolist()
horas_atencao = taxa_fraude[(taxa_fraude >= 0.15) & (taxa_fraude <= 0.25)].index.tolist()
top3_horas = taxa_fraude.sort_values(ascending=False).head(3)

# limiares por valor
p99_normal = np.percentile(normal_amount, 99)  # bem conservador
limite_estatistico = float(limit_value)

st.markdown(f"""
**1) Em quais hor√°rios do dia ocorrem mais fraudes?**  
- **Top 3 horas por taxa de fraude (%):** {', '.join([f'{int(h)}h ({top3_horas[h]:.3f}%)' for h in top3_horas.index])}.  
- **Horas cr√≠ticas (>{25}%):** {', '.join([f'{int(h)}h' for h in horas_criticas]) if horas_criticas else 'Nenhuma acima de 25% na amostra.'}  
- **Faixa de aten√ß√£o (15%‚Äì25%):** {', '.join([f'{int(h)}h' for h in horas_atencao]) if horas_atencao else 'Sem horas na faixa de aten√ß√£o.'}

**2) Qual √© a faixa t√≠pica de valores normais?**  
- A maior parte das transa√ß√µes concentra-se em valores baixos.  
- Um **limite estat√≠stico** calculado por **m√©dia + 2¬∑desv. padr√£o** resulta em **~{limite_estatistico:.2f}**.  
- Para ser ainda mais conservador, o **percentil 99** das transa√ß√µes **normais** √© **~{p99_normal:.2f}**.

**3) Existe diferen√ßa estat√≠stica entre valores de transa√ß√µes normais e fraudulentas?**  
- **Resultado do teste t:** *p-valor* = **{p_val:.5f}** ‚áí {"h√° **diferen√ßa significativa**" if p_val < 0.05 else "n√£o h√° diferen√ßa significativa"} entre as m√©dias.  
{"- O sinal do T-stat √© negativo, indicando que, em m√©dia, transa√ß√µes **fraudulentas tendem a ter valores menores** do que as normais." if t_stat < 0 else ""}

### üéØ Recomenda√ß√µes para o Banco
- **Monitoramento por hor√°rio:** intensificar regras nas horas de maior taxa (top 3 acima).  
- **Confirma√ß√£o extra por valor:** exigir **valida√ß√£o dupla** para transa√ß√µes **acima de R$ {max(limite_estatistico, p99_normal):.2f}**  
  (limiar definido como o **m√°ximo** entre *m√©dia + 2¬∑dp* e *P99* das transa√ß√µes normais).  
- **Pol√≠tica adaptativa:** ajustar automaticamente os limiares por ag√™ncia/regi√£o conforme novas amostras forem chegando.  
- **Observa√ß√£o:** como `Amount` e `Time` t√™m **baixa correla√ß√£o** com `Class`, a detec√ß√£o de fraude realista demanda **modelos multivariados** (usando `V1‚ÄìV28`) e regras combinadas (valor + hor√°rio + perfil do cliente).
""")